services:
  jaeger:
    image: jaegertracing/all-in-one:latest
    networks:
      - app_network
    container_name: jaeger
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    networks:
      - app_network
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
    restart: unless-stopped

  loki:
    image: grafana/loki:latest
    networks:
      - app_network
    container_name: loki
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped

  promtail:
    image: grafana/promtail:latest
    networks:
      - app_network
    container_name: promtail
    volumes:
      - ./promtail-config.yaml:/etc/promtail/config.yaml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yaml
    depends_on:
      - loki
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    networks:
      - app_network
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
      - loki
      - jaeger
    restart: unless-stopped

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    networks:
      - app_network
    container_name: otel-collector
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    command: ["--config=/etc/otel-collector-config.yaml"]
    depends_on:
      - jaeger
      - prometheus
    restart: unless-stopped

  dice-app:
    build: .
    container_name: dice-app
    networks:
      - app_network
    depends_on:
      - otel-collector
      - promtail
    environment:
      - FLASK_APP=app.py
      - FLASK_RUN_HOST=0.0.0.0
      - FLASK_RUN_PORT=8080
      - OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED=true
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_METRICS_EXPORTER=otlp
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4319
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_SERVICE_NAME=dice-server
      - OTEL_LOGS_EXPORTER=none
      - OTEL_RESOURCE_ATTRIBUTES=service.name=dice-server,service.version=1.0.0,deployment.environment=production
    ports:
      - "8080:8080"
    labels:
      logging: "promtail"
      service: "dice-app"
    restart: unless-stopped

networks:
  app_network:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:
  loki_data:

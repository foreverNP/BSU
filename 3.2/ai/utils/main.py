import sys
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from scipy.spatial.distance import cdist
from PySide6.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget, QPushButton, QFileDialog, QTextEdit, QLabel
from PySide6.QtGui import QFont, QColor, QPalette


def load_data(file_path):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ CSV.
    –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–æ–ª–±–µ—Ü —Å—á–∏—Ç–∞–µ—Ç—Å—è –º–µ—Ç–∫–æ–π –∫–ª–∞—Å—Å–∞.
    """
    data = pd.read_csv(file_path)
    X = data.iloc[:, :-1].values
    y = data.iloc[:, -1].values
    return X, y


def split_data(X, y, test_size=0.2):
    """
    –†–∞–∑–±–∏–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é –≤—ã–±–æ—Ä–∫–∏.
    """
    unique_classes = np.unique(y)
    X_train, X_test, y_train, y_test = [], [], [], []
    for cls in unique_classes:
        # –û—Ç–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∞—Å—Å–∞
        mask = y == cls
        X_cls = X[mask]
        y_cls = y[mask]
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞
        X_tr, X_te, y_tr, y_te = train_test_split(X_cls, y_cls, test_size=test_size, random_state=42)
        X_train.append(X_tr)
        X_test.append(X_te)
        y_train.append(y_tr)
        y_test.append(y_te)
    return (
        np.vstack(X_train),
        np.hstack(y_train),  # –û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞
        np.vstack(X_test),
        np.hstack(y_test),  # –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞
    )


def s(x1, x2):
    """
    –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ (–µ–≤–∫–ª–∏–¥–æ–≤–∞ –º–µ—Ç—Ä–∏–∫–∞).
    """
    return cdist(x1, x2, metric="euclidean")


def f_min_dist(x, x_train_class):
    """
    –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–ª–∞—Å—Å–∞.
    """
    return np.min(cdist(x, x_train_class), axis=1)


def classify_verbose(x, x_train, y_train):
    """
    –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ x —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏.
    """
    unique_classes = np.unique(y_train)
    distances = []
    for cls in unique_classes:
        x_train_cls = x_train[y_train == cls]
        distances.append(f_min_dist(x, x_train_cls))
    distances = np.vstack(distances).T
    predictions = unique_classes[np.argmin(distances, axis=1)]
    return distances, predictions


def test_algorithm_verbose(X_train, y_train, X_test, y_test):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º —Ä–∞—Å—á–µ—Ç–æ–≤.
    """
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–µ (T0)
    distances_T0, y_pred_T0 = classify_verbose(X_train, X_train, y_train)
    accuracy_T0 = (y_pred_T0 == y_train).mean()

    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ (T1)
    distances_T1, y_pred_T1 = classify_verbose(X_test, X_train, y_train)
    accuracy_T1 = (y_pred_T1 == y_test).mean()

    return accuracy_T0, accuracy_T1, y_pred_T0, y_pred_T1, distances_T0, distances_T1


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("üîç –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä: –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã")
        self.setGeometry(200, 200, 700, 700)

        self.widget = QWidget()
        self.layout = QVBoxLayout(self.widget)
        self.layout.setSpacing(15)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        self.load_button = QPushButton("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        self.load_button.clicked.connect(self.load_data)
        self.load_button.setStyleSheet("padding: 10px; background-color: #2e86de; color: white; border-radius: 8px;")
        self.layout.addWidget(self.load_button)

        # –ú–µ—Ç–∫–∞ —Ñ–∞–π–ª–∞
        self.file_label = QLabel("–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")
        self.file_label.setFont(QFont("Arial", 10, QFont.Bold))
        self.layout.addWidget(self.file_label)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
        self.run_button = QPushButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é")
        self.run_button.clicked.connect(self.run_classification)
        self.run_button.setEnabled(False)
        self.run_button.setStyleSheet("padding: 10px; background-color: #27ae60; color: white; border-radius: 8px;")
        self.layout.addWidget(self.run_button)

        # –û–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞
        self.result_text = QTextEdit()
        self.result_text.setReadOnly(True)
        self.result_text.setFont(QFont("Courier New", 10))
        self.result_text.setStyleSheet("background-color: #f4f6f7; border: 1px solid #ccc; padding: 10px;")
        self.layout.addWidget(self.result_text)

        self.setCentralWidget(self.widget)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.file_path = None
        self.X_train, self.y_train = None, None
        self.X_test, self.y_test = None, None

    def load_data(self):
        file_path, _ = QFileDialog.getOpenFileName(self, "–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö", "", "CSV Files (*.csv)")
        if file_path:
            self.file_path = file_path
            self.file_label.setText(f"üìÅ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {file_path}")

            try:
                X, y = load_data(file_path)
                self.X_train, self.y_train, self.X_test, self.y_test = split_data(X, y, test_size=0.8)
                self.run_button.setEnabled(True)
                self.result_text.setText("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã.")
            except Exception as e:
                self.result_text.setText(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

    def run_classification(self):
        if self.X_train is not None and self.X_test is not None:
            accuracy_T0, accuracy_T1, y_pred_T0, y_pred_T1, distances_T0, distances_T1 = test_algorithm_verbose(
                self.X_train, self.y_train, self.X_test, self.y_test
            )

            lines = [
                f"üìä –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–µ (T0): {accuracy_T0:.2%}",
                f"üìä –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ (T1): {accuracy_T1:.2%}",
                "\nüîé –†–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–∏ (T0):\n",
            ]

            for i in range(len(self.X_train)):
                dist_str = ", ".join([f"{d:.2f}" for d in distances_T0[i]])
                lines.append(f"–û–±—ä–µ–∫—Ç {i + 1}: {dist_str} (–†–µ–∞–ª—å–Ω—ã–π: {self.y_train[i]}, –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π: {y_pred_T0[i]})")

            lines.append("\n\nüîç –†–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏ (T1):\n")

            for i in range(len(self.X_test)):
                dist_str = ", ".join([f"{d:.2f}" for d in distances_T1[i]])
                lines.append(f"–û–±—ä–µ–∫—Ç {i + 1}: {dist_str} (–†–µ–∞–ª—å–Ω—ã–π: {self.y_test[i]}, –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π: {y_pred_T1[i]})")

            self.result_text.setText("\n".join(lines))
        else:
            self.result_text.setText("‚ö†Ô∏è –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")


def main():
    app = QApplication(sys.argv)
    app.setStyle("Fusion")

    # –¢–µ–º–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    palette = QPalette()
    palette.setColor(QPalette.Window, QColor(245, 245, 245))
    palette.setColor(QPalette.WindowText, QColor(33, 33, 33))
    app.setPalette(palette)

    window = MainWindow()
    window.show()
    sys.exit(app.exec())


if __name__ == "__main__":
    main()

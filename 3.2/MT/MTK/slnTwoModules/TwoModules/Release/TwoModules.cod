; Listing generated by Microsoft (R) Optimizing Compiler Version 19.40.33808.0 

	TITLE	d:\dz\unik\mt\nastya\slntwomodules\twomodules\release\twomodules.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0O@NFOCKKMG@Hello?5World?$CB?6@		; `string'
PUBLIC	??_C@_0L@BGCPFPD@?6v?9vector?6@			; `string'
PUBLIC	??_C@_01ICJEACDI@?$DL@				; `string'
PUBLIC	??_C@_0M@BEMFABCP@?6?6w?9vector?6@		; `string'
PUBLIC	??_C@_0BI@OONDOBOB@?6?6scalar?5product?5?$CIv?0w?$CJ?6@ ; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	??_C@_01PKGAHCOL@?$CJ@				; `string'
PUBLIC	??_C@_02KEGNLNML@?0?5@				; `string'
PUBLIC	??_C@_0BK@DGGENHGL@?6vector?5product?5?$CIv?0?5w?$CJ?3?5?$CI@ ; `string'
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?uncaught_exception@std@@YA_NXZ:PROC
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__imp____std_terminate:PROC
EXTRN	__imp____CxxFrameHandler3:PROC
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
;	COMDAT ??_C@_0BK@DGGENHGL@?6vector?5product?5?$CIv?0?5w?$CJ?3?5?$CI@
CONST	SEGMENT
??_C@_0BK@DGGENHGL@?6vector?5product?5?$CIv?0?5w?$CJ?3?5?$CI@ DB 0aH, 've'
	DB	'ctor product (v, w): (', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02KEGNLNML@?0?5@
CONST	SEGMENT
??_C@_02KEGNLNML@?0?5@ DB ', ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01PKGAHCOL@?$CJ@
CONST	SEGMENT
??_C@_01PKGAHCOL@?$CJ@ DB ')', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OONDOBOB@?6?6scalar?5product?5?$CIv?0w?$CJ?6@
CONST	SEGMENT
??_C@_0BI@OONDOBOB@?6?6scalar?5product?5?$CIv?0w?$CJ?6@ DB 0aH, 0aH, 'sca'
	DB	'lar product (v,w)', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BEMFABCP@?6?6w?9vector?6@
CONST	SEGMENT
??_C@_0M@BEMFABCP@?6?6w?9vector?6@ DB 0aH, 0aH, 'w-vector', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01ICJEACDI@?$DL@
CONST	SEGMENT
??_C@_01ICJEACDI@?$DL@ DB ';', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BGCPFPD@?6v?9vector?6@
CONST	SEGMENT
??_C@_0L@BGCPFPD@?6v?9vector?6@ DB 0aH, 'v-vector', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NFOCKKMG@Hello?5World?$CB?6@
CONST	SEGMENT
??_C@_0O@NFOCKKMG@Hello?5World?$CB?6@ DB 'Hello World!', 0aH, 00H ; `string'
CONST	ENDS
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z	; std::_Narrow_char_traits<char,int>::length
PUBLIC	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
PUBLIC	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ	; std::_Narrow_char_traits<char,int>::eof
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	_main
EXTRN	___std_terminate:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$13
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	01H
	DD	00H
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:___std_terminate
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$19
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$19 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
; Function compile flags: /Ogtp
; File D:\DZ\UNIK\MT\nastya\slnTwoModules\TwoModules\TwoModules.cpp
;	COMDAT _main
_TEXT	SEGMENT
_v$ = -24						; size = 12
_w$ = -12						; size = 12
_main	PROC						; COMDAT

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 13   :     std::cout << "Hello World!\n";

  00009	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0000f	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0O@NFOCKKMG@Hello?5World?$CB?6@
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >

; 14   :     float v[] = { 1,2,3 };
; 15   :     float w[] = { 3,2,1 };
; 16   :     float vw;
; 17   :     int res = scalar(3, v, w, &vw);
; 18   : 
; 19   :     std::cout << "\nv-vector\n";

  0001a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00020	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0L@BGCPFPD@?6v?9vector?6@
  00025	c7 44 24 08 00
	00 80 3f	 mov	 DWORD PTR _v$[esp+32], 1065353216 ; 3f800000H
  0002d	c7 44 24 0c 00
	00 00 40	 mov	 DWORD PTR _v$[esp+36], 1073741824 ; 40000000H
  00035	c7 44 24 10 00
	00 40 40	 mov	 DWORD PTR _v$[esp+40], 1077936128 ; 40400000H
  0003d	c7 44 24 14 00
	00 40 40	 mov	 DWORD PTR _w$[esp+32], 1077936128 ; 40400000H
  00045	c7 44 24 18 00
	00 00 40	 mov	 DWORD PTR _w$[esp+36], 1073741824 ; 40000000H
  0004d	c7 44 24 1c 00
	00 80 3f	 mov	 DWORD PTR _w$[esp+40], 1065353216 ; 3f800000H
  00055	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0005a	33 f6		 xor	 esi, esi
  0005c	0f 1f 40 00	 npad	 4
$LL4@main:

; 20   :     for (int i = 0; i < 3; i++)
; 21   :         std::cout << v[i] << ";";

  00060	f3 0f 10 44 b4
	08		 movss	 xmm0, DWORD PTR _v$[esp+esi*4+32]
  00066	51		 push	 ecx
  00067	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0006d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
  00078	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_01ICJEACDI@?$DL@
  0007d	8b c8		 mov	 ecx, eax
  0007f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00084	46		 inc	 esi
  00085	83 fe 03	 cmp	 esi, 3
  00088	7c d6		 jl	 SHORT $LL4@main

; 22   : 
; 23   :     std::cout << "\n\nw-vector\n";

  0008a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00090	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0M@BEMFABCP@?6?6w?9vector?6@
  00095	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0009a	33 f6		 xor	 esi, esi
  0009c	0f 1f 40 00	 npad	 4
$LL7@main:

; 24   :     for (int i = 0; i < 3; i++)
; 25   :         std::cout << w[i] << ";";

  000a0	f3 0f 10 44 b4
	14		 movss	 xmm0, DWORD PTR _w$[esp+esi*4+32]
  000a6	51		 push	 ecx
  000a7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
  000b8	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_01ICJEACDI@?$DL@
  000bd	8b c8		 mov	 ecx, eax
  000bf	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000c4	46		 inc	 esi
  000c5	83 fe 03	 cmp	 esi, 3
  000c8	7c d6		 jl	 SHORT $LL7@main

; 26   : 
; 27   :     std::cout << "\n\nscalar product (v,w)\n";

  000ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000d0	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BI@OONDOBOB@?6?6scalar?5product?5?$CIv?0w?$CJ?6@
  000d5	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >

; 28   : 
; 29   :     std::cout << vw << "\n";

  000da	51		 push	 ecx
  000db	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000e1	c7 04 24 00 00
	20 41		 mov	 DWORD PTR [esp], 1092616192 ; 41200000H
  000e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
  000ee	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_01EEMJAFIK@?6@
  000f3	8b c8		 mov	 ecx, eax
  000f5	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >

; 30   : 
; 31   :     float result[3];
; 32   :     int res2 = product(3, v, w, result);
; 33   :     std::cout << "\nvector product (v, w): ("

  000fa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00100	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BK@DGGENHGL@?6vector?5product?5?$CIv?0?5w?$CJ?3?5?$CI@
  00105	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0010a	83 ec 10	 sub	 esp, 16			; 00000010H
  0010d	c7 44 24 0c 00
	00 80 c0	 mov	 DWORD PTR [esp+12], -1065353216 ; c0800000H
  00115	c7 44 24 08 00
	00 00 41	 mov	 DWORD PTR [esp+8], 1090519040 ; 41000000H
  0011d	c7 44 24 04 00
	00 80 c0	 mov	 DWORD PTR [esp+4], -1065353216 ; c0800000H
  00125	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0012a	83 c4 04	 add	 esp, 4
  0012d	8b c8		 mov	 ecx, eax
  0012f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
  00135	51		 push	 ecx
  00136	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_02KEGNLNML@?0?5@
  0013b	8b c8		 mov	 ecx, eax
  0013d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00142	83 c4 04	 add	 esp, 4
  00145	8b c8		 mov	 ecx, eax
  00147	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
  0014d	51		 push	 ecx
  0014e	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_02KEGNLNML@?0?5@
  00153	8b c8		 mov	 ecx, eax
  00155	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0015a	83 c4 04	 add	 esp, 4
  0015d	8b c8		 mov	 ecx, eax
  0015f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
  00165	51		 push	 ecx
  00166	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_01PKGAHCOL@?$CJ@
  0016b	8b c8		 mov	 ecx, eax
  0016d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00172	83 c4 04	 add	 esp, 4
  00175	8b c8		 mov	 ecx, eax
  00177	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 34   :         << result[0] << ", "
; 35   :         << result[1] << ", "
; 36   :         << result[2] << ")" << std::endl;
; 37   :     return 0;

  0017d	33 c0		 xor	 eax, eax

; 38   : }

  0017f	5e		 pop	 esi
  00180	8b e5		 mov	 esp, ebp
  00182	5d		 pop	 ebp
  00183	c3		 ret	 0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 129  :             return _Ok;

  00000	8a 41 04	 mov	 al, BYTE PTR [ecx+4]

; 130  :         }

  00003	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 113  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 114  : #if !_HAS_EXCEPTIONS
; 115  :             const bool _Zero_uncaught_exceptions = true;
; 116  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 117  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?uncaught_exception@std@@YA_NXZ

; 118  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 119  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 120  : #endif // ^^^ !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION ^^^
; 121  : 
; 122  :             if (_Zero_uncaught_exceptions) {

  0002b	84 c0		 test	 al, al
  0002d	75 08		 jne	 SHORT $LN2@sentry

; 123  :                 this->_Myostr._Osfx();

  0002f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
$LN2@sentry:

; 82   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 83   :             const auto _Rdbuf = _Myostr.rdbuf();

  0003e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00040	8b 01		 mov	 eax, DWORD PTR [ecx]
  00042	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00045	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]

; 84   :             if (_Rdbuf) {

  00049	85 c9		 test	 ecx, ecx
  0004b	74 05		 je	 SHORT $LN6@sentry

; 85   :                 _Rdbuf->_Unlock();

  0004d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004f	ff 50 08	 call	 DWORD PTR [eax+8]
$LN6@sentry:

; 124  :             }
; 125  :         }

  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	5e		 pop	 esi
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
  00062	cc		 int	 3
  00063	cc		 int	 3
  00064	cc		 int	 3
  00065	cc		 int	 3
  00066	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 96   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi

; 75   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  0002a	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  0002d	89 37		 mov	 DWORD PTR [edi], esi

; 76   :             const auto _Rdbuf = _Myostr.rdbuf();

  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00034	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]

; 77   :             if (_Rdbuf) {

  00038	85 c9		 test	 ecx, ecx
  0003a	74 05		 je	 SHORT $LN8@sentry

; 78   :                 _Rdbuf->_Lock();

  0003c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003e	ff 50 04	 call	 DWORD PTR [eax+4]
$LN8@sentry:

; 96   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 97   :             if (!_Ostr.good()) {

  00048	8b 06		 mov	 eax, DWORD PTR [esi]
  0004a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004d	03 ce		 add	 ecx, esi
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  00055	84 c0		 test	 al, al
  00057	74 28		 je	 SHORT $LN21@sentry
$LN2@sentry:

; 98   :                 _Ok = false;
; 99   :                 return;
; 100  :             }
; 101  : 
; 102  :             const auto _Tied = _Ostr.tie();

  00059	8b 06		 mov	 eax, DWORD PTR [esi]
  0005b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0005e	8b 4c 30 3c	 mov	 ecx, DWORD PTR [eax+esi+60]

; 103  :             if (!_Tied || _Tied == &_Ostr) {

  00062	85 c9		 test	 ecx, ecx
  00064	74 19		 je	 SHORT $LN4@sentry
  00066	3b ce		 cmp	 ecx, esi
  00068	74 15		 je	 SHORT $LN4@sentry

; 105  :                 return;
; 106  :             }
; 107  : 
; 108  :             _Tied->flush();

  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ

; 109  :             _Ok = _Ostr.good(); // store test only after flushing tie

  00070	8b 06		 mov	 eax, DWORD PTR [esi]
  00072	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00075	03 ce		 add	 ecx, esi
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  0007d	eb 02		 jmp	 SHORT $LN21@sentry
$LN4@sentry:

; 104  :                 _Ok = true;

  0007f	b0 01		 mov	 al, 1
$LN21@sentry:

; 110  :         }

  00081	88 47 04	 mov	 BYTE PTR [edi+4], al
  00084	8b c7		 mov	 eax, edi
  00086	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00089	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00090	59		 pop	 ecx
  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ PROC		; std::_Narrow_char_traits<char,int>::eof, COMDAT

; 472  :         return static_cast<int_type>(EOF);

  00000	83 c8 ff	 or	 eax, -1

; 473  :     }

  00003	c3		 ret	 0
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ENDP		; std::_Narrow_char_traits<char,int>::eof
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z PROC ; std::_Narrow_char_traits<char,int>::eq_int_type, COMDAT

; 463  :     _NODISCARD static constexpr bool eq_int_type(const int_type _Left, const int_type _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 464  :         return _Left == _Right;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	3b 45 0c	 cmp	 eax, DWORD PTR __Right$[ebp]
  00009	0f 94 c0	 sete	 al

; 465  :     }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ENDP ; std::_Narrow_char_traits<char,int>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
_TEXT	SEGMENT
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT
; __First$ = ecx

; 386  :         // find length of null-terminated string
; 387  : #if _HAS_CXX17
; 388  : #ifdef __cpp_char8_t
; 389  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 390  : #if _HAS_U8_INTRINSICS
; 391  :             return __builtin_u8strlen(_First);
; 392  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 393  :             return _Primary_char_traits::length(_First);
; 394  : #endif // ^^^ no u8 intrinsics ^^^
; 395  :         } else
; 396  : #endif // defined(__cpp_char8_t)
; 397  :         {
; 398  :             return __builtin_strlen(_First);
; 399  :         }
; 400  : #else // ^^^ _HAS_CXX17 / !_HAS_CXX17 vvv
; 401  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00000	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL4@length:
  00003	8a 01		 mov	 al, BYTE PTR [ecx]
  00005	41		 inc	 ecx
  00006	84 c0		 test	 al, al
  00008	75 f9		 jne	 SHORT $LL4@length
  0000a	2b ca		 sub	 ecx, edx
  0000c	8b c1		 mov	 eax, ecx

; 402  : #endif // ^^^ !_HAS_CXX17 ^^^
; 403  :     }

  0000e	c3		 ret	 0
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 82   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 83   :             const auto _Rdbuf = _Myostr.rdbuf();

  00022	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00024	8b 01		 mov	 eax, DWORD PTR [ecx]
  00026	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00029	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]

; 84   :             if (_Rdbuf) {

  0002d	85 c9		 test	 ecx, ecx
  0002f	74 05		 je	 SHORT $LN2@Sentry_bas

; 85   :                 _Rdbuf->_Unlock();

  00031	8b 01		 mov	 eax, DWORD PTR [ecx]
  00033	ff 50 08	 call	 DWORD PTR [eax+8]
$LN2@Sentry_bas:

; 86   :             }
; 87   :         }

  00036	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00039	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00040	59		 pop	 ecx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
  00045	cc		 int	 3
  00046	cc		 int	 3
  00047	cc		 int	 3
  00048	cc		 int	 3
  00049	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 75   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	89 16		 mov	 DWORD PTR [esi], edx

; 76   :             const auto _Rdbuf = _Myostr.rdbuf();

  0000b	8b 02		 mov	 eax, DWORD PTR [edx]
  0000d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00010	8b 4c 10 38	 mov	 ecx, DWORD PTR [eax+edx+56]

; 77   :             if (_Rdbuf) {

  00014	85 c9		 test	 ecx, ecx
  00016	74 05		 je	 SHORT $LN9@Sentry_bas

; 78   :                 _Rdbuf->_Lock();

  00018	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001a	ff 50 04	 call	 DWORD PTR [eax+4]
$LN9@Sentry_bas:

; 79   :             }
; 80   :         }

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\ostream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
__Ok$ = -48						; size = 8
__Pad$ = -48						; size = 8
__Val$1$ = -40						; size = 4
$T15 = -40						; size = 1
$T10 = -36						; size = 1
__Ostr$ = -32						; size = 4
__Count$2$ = -28					; size = 4
__State$ = -24						; size = 4
__State$1$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT
; __Ostr$ = ecx
; __Val$ = edx

; 774  : basic_ostream<char, _Traits>& operator<<(basic_ostream<char, _Traits>& _Ostr, const char* _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	89 55 d8	 mov	 DWORD PTR __Val$1$[ebp], edx
  0002e	8b d9		 mov	 ebx, ecx
  00030	89 5d e0	 mov	 DWORD PTR __Ostr$[ebp], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring

; 401  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00033	8b ca		 mov	 ecx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\ostream

; 779  :     ios_base::iostate _State = ios_base::goodbit;

  00035	33 c0		 xor	 eax, eax
  00037	89 45 ec	 mov	 DWORD PTR __State$1$[ebp], eax
  0003a	89 45 e8	 mov	 DWORD PTR __State$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring

; 401  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0003d	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LL134@operator:
  00040	8a 01		 mov	 al, BYTE PTR [ecx]
  00042	41		 inc	 ecx
  00043	84 c0		 test	 al, al
  00045	75 f9		 jne	 SHORT $LL134@operator
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\ostream

; 781  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  00047	8b 03		 mov	 eax, DWORD PTR [ebx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring

; 401  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00049	2b ce		 sub	 ecx, esi
  0004b	89 4d e4	 mov	 DWORD PTR __Count$2$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\ostream

; 781  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  0004e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00051	8b 7c 18 24	 mov	 edi, DWORD PTR [eax+ebx+36]
  00055	8b 74 18 20	 mov	 esi, DWORD PTR [eax+ebx+32]
  00059	85 ff		 test	 edi, edi
  0005b	7c 17		 jl	 SHORT $LN17@operator
  0005d	7f 0e		 jg	 SHORT $LN136@operator
  0005f	85 f6		 test	 esi, esi
  00061	74 11		 je	 SHORT $LN17@operator
  00063	85 ff		 test	 edi, edi
  00065	7c 0d		 jl	 SHORT $LN17@operator
  00067	7f 04		 jg	 SHORT $LN136@operator
  00069	3b f1		 cmp	 esi, ecx
  0006b	76 07		 jbe	 SHORT $LN17@operator
$LN136@operator:
  0006d	2b f1		 sub	 esi, ecx
  0006f	83 df 00	 sbb	 edi, 0
  00072	eb 0e		 jmp	 SHORT $LN18@operator
$LN17@operator:
  00074	0f 57 c0	 xorps	 xmm0, xmm0
  00077	66 0f 13 45 d0	 movlpd	 QWORD PTR __Pad$[ebp], xmm0
  0007c	8b 7d d4	 mov	 edi, DWORD PTR __Pad$[ebp+4]
  0007f	8b 75 d0	 mov	 esi, DWORD PTR __Pad$[ebp]
$LN18@operator:

; 76   :             const auto _Rdbuf = _Myostr.rdbuf();

  00082	8b 4c 18 38	 mov	 ecx, DWORD PTR [eax+ebx+56]
  00086	89 5d d0	 mov	 DWORD PTR __Ok$[ebp], ebx

; 77   :             if (_Rdbuf) {

  00089	85 c9		 test	 ecx, ecx
  0008b	74 05		 je	 SHORT $LN98@operator

; 78   :                 _Rdbuf->_Lock();

  0008d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0008f	ff 50 04	 call	 DWORD PTR [eax+4]
$LN98@operator:

; 96   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00092	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 97   :             if (!_Ostr.good()) {

  00099	8b 03		 mov	 eax, DWORD PTR [ebx]
  0009b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0009e	03 cb		 add	 ecx, ebx
  000a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  000a6	84 c0		 test	 al, al
  000a8	74 28		 je	 SHORT $LN148@operator
$LN92@operator:

; 98   :                 _Ok = false;
; 99   :                 return;
; 100  :             }
; 101  : 
; 102  :             const auto _Tied = _Ostr.tie();

  000aa	8b 03		 mov	 eax, DWORD PTR [ebx]
  000ac	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000af	8b 4c 18 3c	 mov	 ecx, DWORD PTR [eax+ebx+60]

; 103  :             if (!_Tied || _Tied == &_Ostr) {

  000b3	85 c9		 test	 ecx, ecx
  000b5	74 19		 je	 SHORT $LN94@operator
  000b7	3b cb		 cmp	 ecx, ebx
  000b9	74 15		 je	 SHORT $LN94@operator

; 105  :                 return;
; 106  :             }
; 107  : 
; 108  :             _Tied->flush();

  000bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ

; 109  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000c1	8b 03		 mov	 eax, DWORD PTR [ebx]
  000c3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c6	03 cb		 add	 ecx, ebx
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  000ce	eb 02		 jmp	 SHORT $LN148@operator
$LN94@operator:

; 104  :                 _Ok = true;

  000d0	b0 01		 mov	 al, 1
$LN148@operator:

; 782  :     const typename _Myos::sentry _Ok(_Ostr);

  000d2	88 45 d4	 mov	 BYTE PTR __Ok$[ebp+4], al
  000d5	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1

; 783  : 
; 784  :     if (!_Ok) {

  000dc	84 c0		 test	 al, al
  000de	75 0a		 jne	 SHORT $LN8@operator

; 785  :         _State |= ios_base::badbit;

  000e0	b9 04 00 00 00	 mov	 ecx, 4

; 786  :     } else { // state okay, insert

  000e5	e9 e4 00 00 00	 jmp	 $LN22@operator
$LN8@operator:

; 787  :         _TRY_IO_BEGIN

  000ea	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2

; 788  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  000ee	8b 03		 mov	 eax, DWORD PTR [ebx]
  000f0	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000f3	8b 44 18 14	 mov	 eax, DWORD PTR [eax+ebx+20]
  000f7	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  000fc	83 f8 40	 cmp	 eax, 64			; 00000040H
  000ff	74 35		 je	 SHORT $LN131@operator
$LL4@operator:

; 789  :             for (; 0 < _Pad; --_Pad) { // pad on left

  00101	85 ff		 test	 edi, edi
  00103	7c 31		 jl	 SHORT $LN131@operator
  00105	7f 04		 jg	 SHORT $LN137@operator
  00107	85 f6		 test	 esi, esi
  00109	74 2b		 je	 SHORT $LN131@operator
$LN137@operator:

; 790  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0010b	8b 03		 mov	 eax, DWORD PTR [ebx]
  0010d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\ios

; 99   :         return _Fillch;

  00110	8a 44 19 40	 mov	 al, BYTE PTR [ecx+ebx+64]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\ostream

; 790  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00114	8b 4c 19 38	 mov	 ecx, DWORD PTR [ecx+ebx+56]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\ios

; 99   :         return _Fillch;

  00118	88 45 dc	 mov	 BYTE PTR $T10[ebp], al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\ostream

; 790  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0011b	ff 75 dc	 push	 DWORD PTR $T10[ebp]
  0011e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring

; 464  :         return _Left == _Right;

  00124	83 f8 ff	 cmp	 eax, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\ostream

; 790  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00127	75 05		 jne	 SHORT $LN2@operator

; 791  :                     _State |= ios_base::badbit; // insertion failed, quit

  00129	8d 48 05	 lea	 ecx, DWORD PTR [eax+5]

; 792  :                     break;

  0012c	eb 2d		 jmp	 SHORT $LN6@operator
$LN2@operator:

; 789  :             for (; 0 < _Pad; --_Pad) { // pad on left

  0012e	83 c6 ff	 add	 esi, -1
  00131	83 d7 ff	 adc	 edi, -1
  00134	eb cb		 jmp	 SHORT $LL4@operator
$LN131@operator:

; 797  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  00136	8b 03		 mov	 eax, DWORD PTR [ebx]
  00138	6a 00		 push	 0
  0013a	ff 75 e4	 push	 DWORD PTR __Count$2$[ebp]
  0013d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00140	ff 75 d8	 push	 DWORD PTR __Val$1$[ebp]
  00143	8b 4c 18 38	 mov	 ecx, DWORD PTR [eax+ebx+56]
  00147	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
  0014d	3b 45 e4	 cmp	 eax, DWORD PTR __Count$2$[ebp]
  00150	75 04		 jne	 SHORT $LN138@operator
  00152	85 d2		 test	 edx, edx
  00154	74 1c		 je	 SHORT $LN143@operator
$LN138@operator:

; 798  :             _State |= ios_base::badbit;

  00156	33 c9		 xor	 ecx, ecx
$LN149@operator:

; 804  :                     _State |= ios_base::badbit; // insertion failed, quit
; 805  :                     break;
; 806  :                 }
; 807  :             }
; 808  :         }
; 809  : 
; 810  :         _Ostr.width(0);

  00158	83 c9 04	 or	 ecx, 4
$LN6@operator:
  0015b	8b 03		 mov	 eax, DWORD PTR [ebx]
  0015d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xiosbase

; 284  :         _Wide                      = _Newwidth;

  00160	c7 44 18 20 00
	00 00 00	 mov	 DWORD PTR [eax+ebx+32], 0
  00168	c7 44 18 24 00
	00 00 00	 mov	 DWORD PTR [eax+ebx+36], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\ostream
  00170	eb 55		 jmp	 SHORT $LN150@operator
$LN143@operator:

; 797  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  00172	33 c9		 xor	 ecx, ecx
$LL140@operator:

; 799  :         }
; 800  : 
; 801  :         if (_State == ios_base::goodbit) {
; 802  :             for (; 0 < _Pad; --_Pad) { // pad on right

  00174	85 ff		 test	 edi, edi
  00176	7c e3		 jl	 SHORT $LN6@operator
  00178	7f 04		 jg	 SHORT $LN139@operator
  0017a	85 f6		 test	 esi, esi
  0017c	74 dd		 je	 SHORT $LN6@operator
$LN139@operator:

; 803  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0017e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00180	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\ios

; 99   :         return _Fillch;

  00183	8a 44 19 40	 mov	 al, BYTE PTR [ecx+ebx+64]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\ostream

; 803  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00187	8b 4c 19 38	 mov	 ecx, DWORD PTR [ecx+ebx+56]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\ios

; 99   :         return _Fillch;

  0018b	88 45 d8	 mov	 BYTE PTR $T15[ebp], al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\ostream

; 803  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0018e	ff 75 d8	 push	 DWORD PTR $T15[ebp]
  00191	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00197	8b 4d ec	 mov	 ecx, DWORD PTR __State$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring

; 464  :         return _Left == _Right;

  0019a	83 f8 ff	 cmp	 eax, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\ostream

; 803  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0019d	74 b9		 je	 SHORT $LN149@operator

; 799  :         }
; 800  : 
; 801  :         if (_State == ios_base::goodbit) {
; 802  :             for (; 0 < _Pad; --_Pad) { // pad on right

  0019f	83 c6 ff	 add	 esi, -1
  001a2	83 d7 ff	 adc	 edi, -1
  001a5	eb cd		 jmp	 SHORT $LL140@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 811  :         _CATCH_IO_(ios_base, _Ostr)

  001a7	8b 55 e0	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001aa	6a 01		 push	 1
  001ac	6a 04		 push	 4
  001ae	8b 02		 mov	 eax, DWORD PTR [edx]
  001b0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001b3	03 ca		 add	 ecx, edx
  001b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  001bb	b8 00 00 00 00	 mov	 eax, $LN23@operator
  001c0	c3		 ret	 0
$LN23@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xiosbase
  001c1	8b 5d e0	 mov	 ebx, DWORD PTR __Ostr$[ebp]
  001c4	8b 4d e8	 mov	 ecx, DWORD PTR __State$[ebp]
$LN150@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\ostream

; 812  :     }
; 813  : 
; 814  :     _Ostr.setstate(_State);

  001c7	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
$LN22@operator:
  001ce	8b 03		 mov	 eax, DWORD PTR [ebx]
  001d0	6a 00		 push	 0
  001d2	51		 push	 ecx
  001d3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001d6	03 cb		 add	 ecx, ebx
  001d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z

; 117  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  001de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?uncaught_exception@std@@YA_NXZ

; 118  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 119  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 120  : #endif // ^^^ !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION ^^^
; 121  : 
; 122  :             if (_Zero_uncaught_exceptions) {

  001e4	8b 75 d0	 mov	 esi, DWORD PTR __Ok$[ebp]
  001e7	84 c0		 test	 al, al
  001e9	75 08		 jne	 SHORT $LN25@operator

; 123  :                 this->_Myostr._Osfx();

  001eb	8b ce		 mov	 ecx, esi
  001ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
$LN25@operator:

; 82   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  001f3	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4

; 83   :             const auto _Rdbuf = _Myostr.rdbuf();

  001fa	8b 06		 mov	 eax, DWORD PTR [esi]
  001fc	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001ff	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]

; 84   :             if (_Rdbuf) {

  00203	85 c9		 test	 ecx, ecx
  00205	74 05		 je	 SHORT $LN141@operator

; 85   :                 _Rdbuf->_Unlock();

  00207	8b 01		 mov	 eax, DWORD PTR [ecx]
  00209	ff 50 08	 call	 DWORD PTR [eax+8]
$LN141@operator:

; 815  :     return _Ostr;
; 816  : }

  0020c	8b c3		 mov	 eax, ebx
  0020e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00211	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00218	59		 pop	 ecx
  00219	5f		 pop	 edi
  0021a	5e		 pop	 esi
  0021b	5b		 pop	 ebx
  0021c	8b e5		 mov	 esp, ebp
  0021e	5d		 pop	 ebp
  0021f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$13:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00008	8d 4d d0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 1018 :     basic_ostream<_Elem, _Traits>& _Ostr) { // insert newline and flush stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1019 :     _Ostr.put(_Ostr.widen('\n'));

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  00007	6a 0a		 push	 10			; 0000000aH
  00009	8b 06		 mov	 eax, DWORD PTR [esi]
  0000b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000e	03 ce		 add	 ecx, esi
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  00016	0f b6 c8	 movzx	 ecx, al
  00019	51		 push	 ecx
  0001a	8b ce		 mov	 ecx, esi
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z

; 1020 :     _Ostr.flush();

  00022	8b ce		 mov	 ecx, esi
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ

; 1021 :     return _Ostr;

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi

; 1022 : }

  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
END

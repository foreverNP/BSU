; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30146.0 

	TITLE	D:\RomanovetsAS\2025MT\slnTwoModules\TwoModules\Debug\Mod2.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__A2B3ED06_pch@h DB 01H
__5D3E9CD9_TwoModules@pch DB 01H
__3D5BFFF5_Mod2@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?scalar@@YAHHQAM0PAM@Z				; scalar
PUBLIC	__JustMyCode_Default
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__fltused:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\RomanovetsAS\2025MT\slnTwoModules\TwoModules\Mod2.cpp
;	COMDAT ?scalar@@YAHHQAM0PAM@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_n$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_vw$ = 20						; size = 4
?scalar@@YAHHQAM0PAM@Z PROC				; scalar, COMDAT

; 7    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  0000f	b9 03 00 00 00	 mov	 ecx, 3
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __3D5BFFF5_Mod2@cpp
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 8    : 	if (n != 3) return 1;

  00025	83 7d 08 03	 cmp	 DWORD PTR _n$[ebp], 3
  00029	74 07		 je	 SHORT $LN5@scalar
  0002b	b8 01 00 00 00	 mov	 eax, 1
  00030	eb 4c		 jmp	 SHORT $LN1@scalar
$LN5@scalar:

; 9    : 	*vw = 0;

  00032	8b 45 14	 mov	 eax, DWORD PTR _vw$[ebp]
  00035	0f 57 c0	 xorps	 xmm0, xmm0
  00038	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 10   : 	for (int i = 0; i < n; i++)

  0003c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00043	eb 09		 jmp	 SHORT $LN4@scalar
$LN2@scalar:
  00045	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00048	83 c0 01	 add	 eax, 1
  0004b	89 45 f8	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@scalar:
  0004e	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00051	3b 45 08	 cmp	 eax, DWORD PTR _n$[ebp]
  00054	7d 26		 jge	 SHORT $LN3@scalar

; 11   : 		*vw = *vw + v[i] * w[i];

  00056	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00059	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  0005c	8b 55 f8	 mov	 edx, DWORD PTR _i$1[ebp]
  0005f	8b 75 10	 mov	 esi, DWORD PTR _w$[ebp]
  00062	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [ecx+eax*4]
  00067	f3 0f 59 04 96	 mulss	 xmm0, DWORD PTR [esi+edx*4]
  0006c	8b 45 14	 mov	 eax, DWORD PTR _vw$[ebp]
  0006f	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  00073	8b 4d 14	 mov	 ecx, DWORD PTR _vw$[ebp]
  00076	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  0007a	eb c9		 jmp	 SHORT $LN2@scalar
$LN3@scalar:

; 12   : 	return 0;

  0007c	33 c0		 xor	 eax, eax
$LN1@scalar:

; 13   : 
; 14   : }

  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
  00081	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00087	3b ec		 cmp	 ebp, esp
  00089	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
?scalar@@YAHHQAM0PAM@Z ENDP				; scalar
_TEXT	ENDS
END
